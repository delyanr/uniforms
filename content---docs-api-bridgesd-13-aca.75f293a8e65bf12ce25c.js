(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{39:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",function(){return s}),a.d(n,"rightToc",function(){return l}),a.d(n,"default",function(){return c});a(0);var r=a(105);function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e}).apply(this,arguments)}function t(e,n){if(null==e)return{};var a,r,i=function(e,n){if(null==e)return{};var a,r,i={},t=Object.keys(e);for(r=0;r<t.length;r++)a=t[r],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)a=t[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s={id:"api-bridges",title:"Bridges"},l=[{value:"Bridge",id:"bridge",children:[]},{value:"GraphQLBridge",id:"graphqlbridge",children:[]},{value:"JSONSchemaBridge",id:"jsonschemabridge",children:[]},{value:"SimpleSchema2Bridge",id:"simpleschema2bridge",children:[]},{value:"SimpleSchemaBridge",id:"simpleschemabridge",children:[]}],d={rightToc:l},m="wrapper";function c(e){var n=e.components,a=t(e,["components"]);return Object(r.b)(m,i({},d,a,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",null,Object(r.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"bridge"})),Object(r.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#bridge"}),"#"),Object(r.b)("inlineCode",{parentName:"h2"},"Bridge")),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-js"}),"import Bridge from 'uniforms/Bridge';\n\n// This is a kind of abstract class. It should be extended to create custom\n// bridges. It implements all of the required methods and throws an error with\n// meaningful \"method not implemented\" error.\nclass CustomBridge extends Bridge {\n  // Check, if this bridge is compatibile with given schema.\n  static check(schema) {\n    /* ... */\n  }\n\n  // Field's scoped error.\n  getError(name, error) {\n    /* ... */\n  }\n\n  // Field's scoped error message.\n  getErrorMessage(name, error) {\n    /* ... */\n  }\n\n  // All error messages from error.\n  getErrorMessages(error) {\n    /* ... */\n  }\n\n  // Field's definition (`field` prop).\n  getField(name) {\n    /* ... */\n  }\n\n  // Field's initial value.\n  getInitialValue(name) {\n    /* ... */\n  }\n\n  // Field's props.\n  getProps(name) {\n    /* ... */\n  }\n\n  // Field's subfields (or first-level fields).\n  getSubfields(name) {\n    /* ... */\n  }\n\n  // Field's type (ex. Number, String).\n  getType(name) {\n    /* ... */\n  }\n\n  // Function with one argument - model - which throws errors when model is\n  // invalid.\n  getValidator(options) {\n    /* ... */\n  }\n}\n")),Object(r.b)("h2",null,Object(r.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"graphqlbridge"})),Object(r.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#graphqlbridge"}),"#"),Object(r.b)("inlineCode",{parentName:"h2"},"GraphQLBridge")),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-js"}),"import {GraphQLBridge} from 'uniforms-bridge-graphql';\nimport {buildASTSchema} from 'graphql';\nimport {parse} from 'graphql';\n\nconst schema = `\n  type Author {\n    id: API-Bridges-       String!\n    firstName: String\n    lastName:  String\n  }\n\n  type Post {\n    id: API-Bridges-    Int!\n    author: Author!\n    title:  String\n    votes:  Int\n  }\n\n  # This is required by buildASTSchema\n  type Query { anything: ID }\n`;\n\nconst schemaType = buildASTSchema(parse(schema)).getType('Post');\nconst schemaData = {\n  id: {\n    allowedValues: [1, 2, 3]\n  },\n  title: {\n    options: [{label: 1, value: 'a'}, {label: 2, value: 'b'}]\n  }\n};\n\nconst schemaValidator = model => {\n  const details = [];\n\n  if (!model.id) {\n    details.push({name: 'id', message: 'ID is required!'});\n  }\n\n  // ...\n\n  if (details.length) {\n    throw {details};\n  }\n};\n\nconst bridge = new GraphQLBridge(schemaType, schemaValidator, schemaData);\n")),Object(r.b)("h2",null,Object(r.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"jsonschemabridge"})),Object(r.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#jsonschemabridge"}),"#"),Object(r.b)("inlineCode",{parentName:"h2"},"JSONSchemaBridge")),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-js"}),"import {JSONSchemaBridge} from 'uniforms-bridge-json-schema';\n\n// SimpleSchema bridge.\nconst bridge = new JSONSchemaBridge(schema, schemaValidator);\n")),Object(r.b)("h2",null,Object(r.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"simpleschema2bridge"})),Object(r.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#simpleschema2bridge"}),"#"),Object(r.b)("inlineCode",{parentName:"h2"},"SimpleSchema2Bridge")),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-js"}),"import {SimpleSchema2Bridge} from 'uniforms-bridge-simple-schema-2';\n\n// SimpleSchema@2 bridge.\nconst bridge = new SimpleSchema2Bridge(simpleSchema2Instance);\n")),Object(r.b)("h2",null,Object(r.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"simpleschemabridge"})),Object(r.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#simpleschemabridge"}),"#"),Object(r.b)("inlineCode",{parentName:"h2"},"SimpleSchemaBridge")),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-js"}),"import {SimpleSchemaBridge} from 'uniforms-bridge-simple-schema';\n\n// SimpleSchema bridge.\nconst bridge = new SimpleSchemaBridge(simpleSchemaInstance);\n")))}c.isMDXComponent=!0}}]);