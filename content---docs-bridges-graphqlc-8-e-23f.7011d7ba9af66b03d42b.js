(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{49:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",function(){return i}),t.d(e,"rightToc",function(){return s}),t.d(e,"default",function(){return p});t(0);var r=t(105);function a(){return(a=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n}).apply(this,arguments)}function o(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var i={id:"bridges-graphql",title:"GraphQL"},s=[],l={rightToc:s},c="wrapper";function p(n){var e=n.components,t=o(n,["components"]);return Object(r.b)(c,a({},l,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),"import {GraphQLBridge} from 'uniforms-bridge-graphql';\nimport {buildASTSchema} from 'graphql';\nimport {parse} from 'graphql';\n\nconst schema = `\n    type Author {\n        id:        String!\n        firstName: String\n        lastName:  String\n    }\n\n    type Post {\n        id:     Int!\n        author: Author!\n        title:  String\n        votes:  Int\n    }\n\n    # This is required by buildASTSchema\n    type Query { anything: ID }\n`;\n\nconst schemaType = buildASTSchema(parse(schema)).getType('Post');\nconst schemaData = {\n  id: {\n    allowedValues: [1, 2, 3]\n  },\n  title: {\n    options: [{label: 1, value: 'a'}, {label: 2, value: 'b'}]\n  }\n};\n\nconst schemaValidator = model => {\n  const details = [];\n\n  if (!model.id) {\n    details.push({name: 'id', message: 'ID is required!'});\n  }\n\n  // ...\n\n  if (details.length) {\n    throw {details};\n  }\n};\n\nconst bridge = new GraphQLBridge(schemaType, schemaValidator, schemaData);\n\n// Later...\n\n<ValidatedForm schema={bridge} />;\n")))}p.isMDXComponent=!0}}]);