(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{41:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",function(){return o}),a.d(n,"rightToc",function(){return s}),a.d(n,"default",function(){return p});a(0);var t=a(105);function l(){return(l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e}).apply(this,arguments)}function i(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o={id:"api-fields",title:"Fields"},s=[{value:"AutoField",id:"autofield",children:[]},{value:"AutoFields",id:"autofields",children:[]},{value:"BaseField",id:"basefield",children:[]},{value:"BoolField",id:"boolfield",children:[]},{value:"DateField",id:"datefield",children:[]},{value:"ErrorField",id:"errorfield",children:[]},{value:"ErrorsField",id:"errorsfield",children:[]},{value:"HiddenField",id:"hiddenfield",children:[]},{value:"ListAddField",id:"listaddfield",children:[]},{value:"ListDelField",id:"listdelfield",children:[]},{value:"ListField",id:"listfield",children:[]},{value:"ListItemField",id:"listitemfield",children:[]},{value:"LongTextField",id:"longtextfield",children:[]},{value:"NestField",id:"nestfield",children:[]},{value:"NumField",id:"numfield",children:[]},{value:"RadioField",id:"radiofield",children:[]},{value:"SelectField",id:"selectfield",children:[]},{value:"SubmitField",id:"submitfield",children:[]},{value:"TextField",id:"textfield",children:[]}],r={rightToc:s},d="wrapper";function p(e){var n=e.components,a=i(e,["components"]);return Object(t.b)(d,l({},r,a,{components:n,mdxType:"MDXLayout"}),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"autofield"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#autofield"}),"#"),Object(t.b)("inlineCode",{parentName:"h2"},"AutoField")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-js"}),"import AutoField from 'uniforms-unstyled/AutoField'; // Choose your theme package.\n\n<AutoField\n  // Field renderer.\n  //   If ommited, then default algorithm is used. Check README for the whole\n  //   logic.\n  component={MyComponent}\n\n  // All additional props are passed to a computed field component.\n/>;\n")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"Note:")," All ",Object(t.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted."),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"autofields"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#autofields"}),"#"),Object(t.b)("inlineCode",{parentName:"h2"},"AutoFields")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-js"}),"import AutoFields from 'uniforms-unstyled/AutoFields'; // Choose your theme package.\n\n<AutoFields\n  // AutoField component.\n  //   By default, it will be your theme AutoField, but you can use your\n  //   custom component.\n  autoField={MyAutoField}\n  // Wrapping element.\n  //   It's clear, isn't it?\n  element=\"section\"\n  // List of fields to render.\n  //   By default, all fields are rendered.\n  fields={['fieldA', 'fieldB']}\n  // List of fields to omit.\n  //   By default, it's empty.\n  omitFields={['fieldA', 'fieldB']}\n/>;\n")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"Note:")," All ",Object(t.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted."),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"basefield"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#basefield"}),"#"),Object(t.b)("inlineCode",{parentName:"h2"},"BaseField")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-js"}),"import BaseField from 'uniforms/BaseField';\n\n// You can't really render a BaseField because it doesn't have a render method.\n// It's a base class of all packaged fields, so that all props below are available\n// to all fields.\n<BaseField\n  // Field disabled state.\n  //   It's passed directly to the field, but it propagates same as the label.\n  disabled={false}\n  // Field label.\n  //   This prop has three modes. If you pass a string, then it will be used\n  //   as a label. If you pass a null, then it won't have a label, but nested\n  //   fields will have default labels. If you pass a non-null falsy value, it\n  //   won't have a label and nested fields won't have labels too.\n  label={true}\n  // Field name.\n  //   Used for identification. It should match your schema - if not, it will\n  //   throw an error.\n  name=\"field\"\n  // Field placeholder.\n  //   If set to true, then a label will be used. Otherwise, it's handled like\n  //   a label (including propagation).\n  placeholder={false}\n  // Field value.\n  //   Every field accepts its specific value type only.\n  value={value}\n\n  // You can pass any prop but remember that passing onChange will \"detach\"\n  // the field from the form in some way - it won't change your form state.\n  // Also, passing any already provided prop - like id - will override the\n  // default one.\n/>;\n")),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"boolfield"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#boolfield"}),"#"),Object(t.b)("inlineCode",{parentName:"h2"},"BoolField")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-js"}),"import BoolField from 'uniforms-unstyled/BoolField'; // Choose your theme package.\n\n<BoolField\n  // Field appearance. Set to \"toggle\" to appear as a Material Toggle or to\n  // \"checkbox\" (or leave it undefined) to use a Checkbox appearance.\n  // Available in:\n  //   material\n  appearance=\"toggle\" // Renders a material-ui Toggle\n  appearance=\"checkbox\" // Renders a material-ui Checkbox\n  // Field feedback state.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap4\n  feedbackable={true}\n  // Field layout.\n  //   Bootstrap grid layout style. Number is an equivalent of {sm: n}. Object\n  //   is a {mode: size} object. Complete string is simply passed through.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  grid={3} // 'col-3-sm' on label, 'col-9-sm' on input\n  grid=\"4\" // 'col-4-sm' on label, 'col-8-sm' on input\n  grid={{md: 5}} // 'col-5-md' on label, 'col-7-md' on input\n  grid=\"col-6-xl\" // 'col-6-xl' on label, 'col-6-xl' on input\n  // Field layout\n  //  The layout of label. You can set span and/or offset.\n  // Available in:\n  //   antd\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  // Field layout\n  //   The layout for input controls. Same as labelCol\n  // Available in:\n  //   antd\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  // Help text.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  help=\"Need help?\"\n  // Help block className.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  helpClassName=\"a b c\"\n  // Checkbox inline state.\n  //   In bootstrap themes, a label is rendered as a text but in inline mode,\n  //   it's treated as a field label.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  inline={true}\n  // Input wrapper class name.\n  //   In bootstrap themes, passed className is used on field block. This is\n  //   used on direct field wrapper.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  inputClassName=\"a b c\"\n  // Input ref.\n  //   Setting ref prop to a field won't work as desired, because you'll\n  //   receive a field component rather than an HTML input. If you need an input ref,\n  //   use this prop instead.\n  inputRef={ref => {}}\n  // Left label.\n  //   In bootstrap themes, label is rendered on the right side of a checkbox.\n  //   This label is rendered above the field.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  labelBefore=\"Label\"\n  // Field inline error.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   antd\n  //   bootstrap3\n  //   bootstrap4\n  //   semantic\n  showInlineError={true}\n  // Field and sourroundings wrap className.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  wrapClassName=\"a b c\"\n/>;\n")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"Note:")," All ",Object(t.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted."),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"datefield"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#datefield"}),"#"),Object(t.b)("inlineCode",{parentName:"h2"},"DateField")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-js"}),"import DateField from 'uniforms-unstyled/DateField'; // Choose your theme package.\n\n<DateField\n  // Field feedback state.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap4\n  feedbackable={true}\n  // Field layout.\n  //   Bootstrap grid layout style. Number is an equivalent of {sm: n}. Object\n  //   is a {mode: size} object. Complete string is simply passed through.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  grid={3} // 'col-3-sm' on label, 'col-9-sm' on input\n  grid=\"4\" // 'col-4-sm' on label, 'col-8-sm' on input\n  grid={{md: 5}} // 'col-5-md' on label, 'col-7-md' on input\n  grid=\"col-6-xl\" // 'col-6-xl' on label, 'col-6-xl' on input\n  // Field layout\n  //  The layout of label. You can set span and/or offset.\n  // Available in:\n  //   antd\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  // Field layout\n  //   The layout for input controls. Same as labelCol\n  // Available in:\n  //   antd\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  // Help text.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  help=\"Need help?\"\n  // Help block className.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  helpClassName=\"a b c\"\n  // Input icon.\n  //   Semantic inputs can have an icon. By default, it's placed on the right\n  //   side - to place it on the left, use iconLeft prop instead.\n  // Available in:\n  //   semantic\n  icon=\"user\"\n  // Input left icon.\n  //   Semantic inputs can have an icon. With this prop, it's placed on the\n  //   left side - to place it on the right, use icon prop instead.\n  // Available in:\n  //   semantic\n  iconLeft=\"user\"\n  // Input icon props.\n  //   Semantic inputs can have an icon. These props are passed directly to\n  //   the icon element.\n  // Available in:\n  //   semantic\n  iconProps={{onClick() {}}}\n  // Input wrapper class name.\n  //   In bootstrap themes, passed className is used on the field block. This\n  //   is used on the direct field wrapper.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  inputClassName=\"a b c\"\n  // Input ref.\n  //   Setting ref prop to a field won't work as desired, because you'll\n  //   receive a field component rather than an HTML input. If you need an input ref,\n  //   use this prop instead.\n  inputRef={ref => {}}\n  // Props for the InputLabel\n  // Available in:\n  //   material-ui\n  labelProps={{shrink: true, disableAnimation: true}}\n  // Maximum value.\n  //   Date object.\n  max={new Date(2100, 1, 1)}\n  // Minimal value.\n  //   Date object.\n  min={new Date(2000, 1, 1)}\n  // Field inline error.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   antd\n  //   bootstrap3\n  //   bootstrap4\n  //   semantic\n  //   material\n  showInlineError={true}\n  // Field and sourroundings wrap className.\n  //   In SemanticUI theme, this class name is used on ui input wrapper,\n  //   so you can pass classes like small, huge, inverted, transparent etc.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  //   semantic\n  wrapClassName=\"a b c\"\n  // Display time picker in ampm (12hr) format or 24hr format.\n  // Available in:\n  //   material\n  timeFormat=\"ampm\"\n/>;\n")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"Note:")," All ",Object(t.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted."),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"errorfield"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#errorfield"}),"#"),Object(t.b)("inlineCode",{parentName:"h2"},"ErrorField")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-js"}),"import ErrorField from 'uniforms-unstyled/ErrorField'; // Choose your theme package.\n\n<ErrorField\n  // Custom content.\n  //   By default, it will render a block with the error message (if any), but\n  //   you can customize the content.\n  children={children}\n  // Target field.\n  //   This field error should be used.\n  name=\"field\"\n/>;\n")),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"errorsfield"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#errorsfield"}),"#"),Object(t.b)("inlineCode",{parentName:"h2"},"ErrorsField")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-js"}),"import ErrorsField from 'uniforms-unstyled/ErrorsField'; // Choose your theme package.\n\n<ErrorsField\n  // Custom content.\n  //   By default, it will render a block with the error messages (if any),\n  //   but you can customize the content.\n  children={children}\n/>;\n")),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"hiddenfield"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#hiddenfield"}),"#"),Object(t.b)("inlineCode",{parentName:"h2"},"HiddenField")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-js"}),"import HiddenField from 'uniforms-unstyled/HiddenField'; // Choose your theme package.\n\n<HiddenField\n  // Field name.\n  //   Used for identification. It should match your schema - if not, it will\n  //   throw an error.\n  name=\"field\"\n  // Field value.\n  //   This field has completely different semantics. When a value is set,\n  //   then it's updating a current model instead of being passed to the field.\n  value={value}\n/>;\n")),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"listaddfield"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#listaddfield"}),"#"),Object(t.b)("inlineCode",{parentName:"h2"},"ListAddField")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-js"}),"import ListAddField from 'uniforms-unstyled/ListAddField'; // Choose your theme package.\n\n<ListAddField\n  // Icon.\n  //   By default, glyphicon is used.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  addIcon={<MyAddIcon />}\n/>;\n")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"Note:")," All ",Object(t.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted.",Object(t.b)("br",null),"\n",Object(t.b)("strong",{parentName:"p"},"Note:")," This is one of ",Object(t.b)("em",{parentName:"p"},"internal")," components of ",Object(t.b)("inlineCode",{parentName:"p"},"ListField"),"."),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"listdelfield"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#listdelfield"}),"#"),Object(t.b)("inlineCode",{parentName:"h2"},"ListDelField")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-js"}),"import ListDelField from 'uniforms-unstyled/ListDelField'; // Choose your theme package.\n\n<ListDelField\n  // Icon.\n  //   By default, glyphicon is used.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  removeIcon={<MyRemoveIcon />}\n/>;\n")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"Note:")," All ",Object(t.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted.",Object(t.b)("br",null),"\n",Object(t.b)("strong",{parentName:"p"},"Note:")," This is one of ",Object(t.b)("em",{parentName:"p"},"internal")," components of ",Object(t.b)("inlineCode",{parentName:"p"},"ListField"),"."),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"listfield"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#listfield"}),"#"),Object(t.b)("inlineCode",{parentName:"h2"},"ListField")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-js"}),"import ListField from 'uniforms-unstyled/ListField'; // Choose your theme package.\n\n<ListField\n  // Icon.\n  //   It's passed to the ListAddField.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  addIcon={<MyAddIcon />}\n  // Initial items count.\n  //   At least this amount of fields will be rendered at the beginning.\n  initialCount={5}\n  // ListItemField props.\n  //   These props are passed to the ListItemField.\n  itemProps={\n    {\n      /* ... */\n    }\n  }\n  // Icon.\n  //   It's passed to the ListDelField.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  removeIcon={<MyRemoveIcon />}\n  // Field inline error.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  //   semantic\n  showInlineError={true}\n/>;\n")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"Note:")," All ",Object(t.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted."),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"listitemfield"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#listitemfield"}),"#"),Object(t.b)("inlineCode",{parentName:"h2"},"ListItemField")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-js"}),"import ListItemField from 'uniforms-unstyled/ListItemField'; // Choose your theme package.\n\n<ListItemField\n  // Icon.\n  //   It's passed to the ListDelField.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  removeIcon={<MyRemoveIcon />}\n/>;\n")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"Note:")," All ",Object(t.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted.",Object(t.b)("br",null),"\n",Object(t.b)("strong",{parentName:"p"},"Note:")," This is one of ",Object(t.b)("em",{parentName:"p"},"internal")," components of ",Object(t.b)("inlineCode",{parentName:"p"},"ListField"),"."),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"longtextfield"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#longtextfield"}),"#"),Object(t.b)("inlineCode",{parentName:"h2"},"LongTextField")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-js"}),"import LongTextField from 'uniforms-unstyled/LongTextField'; // Choose your theme package.\n\n<LongTextField\n  // Field layout.\n  //   Bootstrap grid layout style. Number is an equivalent of {sm: n}. Object\n  //   is a {mode: size} object. Complete string is simply passed through.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  grid={3} // 'col-3-sm' on label, 'col-9-sm' on input\n  grid=\"4\" // 'col-4-sm' on label, 'col-8-sm' on input\n  grid={{md: 5}} // 'col-5-md' on label, 'col-7-md' on input\n  grid=\"col-6-xl\" // 'col-6-xl' on label, 'col-6-xl' on input\n  // Help text.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  help=\"Need help?\"\n  // Field layout\n  //  The layout of label. You can set span and/or offset.\n  // Available in:\n  //   antd\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  // Field layout\n  //   The layout for input controls. Same as labelCol\n  // Available in:\n  //   antd\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  // Help block className.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  helpClassName=\"a b c\"\n  // Input icon.\n  //   Semantic inputs can have an icon. By default, it's placed on the right\n  //   side - to place it on the left, use iconLeft prop instead.\n  // Available in:\n  //   semantic\n  icon=\"user\"\n  // Input left icon.\n  //   Semantic inputs can have an icon. With this prop, it's placed on the\n  //   left side - to place it on the right, use icon prop instead.\n  // Available in:\n  //   semantic\n  iconLeft=\"user\"\n  // Input icon props.\n  //   Semantic inputs can have an icon. These props are passed directly to\n  //   the icon element.\n  // Available in:\n  //   semantic\n  iconProps={{onClick() {}}}\n  // Input wrapper class name.\n  //   In bootstrap themes, passed className is used on field block. This is\n  //   used on direct field wrapper.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  inputClassName=\"a b c\"\n  // Input ref.\n  //   Setting ref prop to a field won't work as desired, because you'll\n  //   receive a field component rather than a HTML input. If you need an input ref,\n  //   use this prop instead.\n  inputRef={ref => {}}\n  // Field inline error.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   antd\n  //   bootstrap3\n  //   bootstrap4\n  //   semantic\n  //   material\n  showInlineError={true}\n  // Field and sourroundings wrap className.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  wrapClassName=\"a b c\"\n/>;\n")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"Note:")," All ",Object(t.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted."),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"nestfield"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#nestfield"}),"#"),Object(t.b)("inlineCode",{parentName:"h2"},"NestField")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-js"}),"import NestField from 'uniforms-unstyled/NestField'; // Choose your theme package.\n\n<NestField\n  // Array of rendered fields.\n  //   If no custom content provided, only those fields are rendered. By\n  //   default, all of nested fields are rendered.\n  fields={['fieldA', 'fieldB' /* ... */]}\n  // Field inline error.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   antd\n  //   bootstrap3\n  //   bootstrap4\n  //   semantic\n  showInlineError={true}\n  // Add / remove \"grouped\" class from the field.\n  //   In Semantic, fields can be grouped using this class. By default,\n  //   this class is added to the NestField.\n  // Available in:\n  //   semantic\n  grouped={true}\n/>;\n")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"Note:")," All ",Object(t.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted."),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"numfield"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#numfield"}),"#"),Object(t.b)("inlineCode",{parentName:"h2"},"NumField")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-js"}),"import NumField from 'uniforms-unstyled/NumField'; // Choose your theme package.\n\n<NumField\n  // Decimal mode.\n  //   This will change value step from 1 to 0.01.\n  decimal={true}\n  // Field layout.\n  //   Bootstrap grid layout style. Number is an equivalent of {sm: n}. Object\n  //   is a {mode: size} object. Complete string is simply passed through.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  grid={3} // 'col-3-sm' on label, 'col-9-sm' on input\n  grid=\"4\" // 'col-4-sm' on label, 'col-8-sm' on input\n  grid={{md: 5}} // 'col-5-md' on label, 'col-7-md' on input\n  grid=\"col-6-xl\" // 'col-6-xl' on label, 'col-6-xl' on input\n  // Field layout\n  //  The layout of label. You can set span and/or offset.\n  // Available in:\n  //   antd\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  // Field layout\n  //   The layout for input controls. Same as labelCol\n  // Available in:\n  //   antd\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  // Help text.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  help=\"Need help?\"\n  // Help block className.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  helpClassName=\"a b c\"\n  // Input icon.\n  //   Semantic inputs can have an icon. By default, it's placed on the right\n  //   side - to place it on the left, use iconLeft prop instead.\n  // Available in:\n  //   semantic\n  icon=\"user\"\n  // Input left icon.\n  //   Semantic inputs can have an icon. With this prop, it's placed on the\n  //   left side - to place it on the right, use icon prop instead.\n  // Available in:\n  //   semantic\n  iconLeft=\"user\"\n  // Input icon props.\n  //   Semantic inputs can have an icon. These props are passed directly to\n  //   the icon element.\n  // Available in:\n  //   semantic\n  iconProps={{onClick() {}}}\n  // Input wrapper class name.\n  //   In bootstrap themes, passed className is used on field block. This is\n  //   used on direct field wrapper.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  inputClassName=\"a b c\"\n  // Input ref.\n  //   Setting ref prop to a field won't work as desired, because you'll\n  //   receive a field component rather than a HTML input. If you need an input ref,\n  //   use this prop instead.\n  inputRef={ref => {}}\n  // Maximum value.\n  max={100}\n  // Minimum value.\n  min={10}\n  // Field inline error.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   antd\n  //   bootstrap3\n  //   bootstrap4\n  //   material\n  //   semantic\n  showInlineError={true}\n  // Input step.\n  step={5}\n  // Field and sourroundings wrap className.\n  //   In SemanticUI theme, this class name is used on ui input wrapper,\n  //   so you can pass variations like small, huge, inverted, transparent etc.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  //   semantic\n  wrapClassName=\"a b c\"\n/>;\n")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"Note:")," All ",Object(t.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted."),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"radiofield"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#radiofield"}),"#"),Object(t.b)("inlineCode",{parentName:"h2"},"RadioField")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-js"}),"import RadioField from 'uniforms-unstyled/RadioField'; // Choose your theme package.\n\n<RadioField\n  // Array of allowed values.\n  //   By default, those are extracted from your schema.\n  allowedValues={[value1, value2 /* ... */]}\n  // Field layout\n  //  The layout of label. You can set span and/or offset.\n  // Available in:\n  //   antd\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  // Field layout\n  //   The layout for input controls. Same as labelCol\n  // Available in:\n  //   antd\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  // Checkbox inline state.\n  //   In bootstrap themes, label is rendered as a text, but in inline mode,\n  //   it's treated as a field label.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  inline={true}\n  // Input wrapper class name.\n  //   In bootstrap themes, passed className is used on field block. This is\n  //   used on direct field wrapper.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  inputClassName=\"a b c\"\n  // Field inline error.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   antd\n  //   bootstrap3\n  //   bootstrap4\n  //   semantic\n  showInlineError={true}\n  // Label transform.\n  //   Allows to transform the each value into a human-readable label\n  transform={value => label}\n/>;\n")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"Note:")," All ",Object(t.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted."),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"selectfield"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#selectfield"}),"#"),Object(t.b)("inlineCode",{parentName:"h2"},"SelectField")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-js"}),"import SelectField from 'uniforms-unstyled/SelectField'; // Choose your theme package.\n\n<SelectField\n  // Array of allowed values.\n  //   By default, those are extracted from your schema.\n  allowedValues={[value1, value2 /* ... */]}\n  // Turn on checkbox/radio mode.\n  //   It's always true in mutltiple (i.e. fieldType === Array) mode.\n  checkboxes={true}\n  // Field layout\n  //  The layout of label. You can set span and/or offset.\n  // Available in:\n  //   antd\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  // Field layout\n  //   The layout for input controls. Same as labelCol\n  // Available in:\n  //   antd\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  // Checkbox inline state.\n  //   In bootstrap themes, label is rendered as a text, but in inline mode,\n  //   it's treated as a field label.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  inline={true}\n  // Input wrapper class name.\n  //   In bootstrap themes, passed className is used on field block. This is\n  //   used on direct field wrapper.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  inputClassName=\"a b c\"\n  // Input ref.\n  //   Setting ref prop to a field won't work as desired, because you'll\n  //   receive a field component rather than a HTML input. If you need an input ref,\n  //   use this prop instead.\n  inputRef={ref => {}}\n  // Props for the InputLabel\n  // Available in:\n  //   material-ui\n  labelProps={{shrink: true, disableAnimation: true}}\n  // Field inline error.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   antd\n  //   bootstrap3\n  //   bootstrap4\n  //   semantic\n  showInlineError={true}\n  // Label transform.\n  //   Allows to transform the each value into a human-readable label\n  transform={value => label} //   Set of values that will be shown in the select.\n  // Options.\n  //   It is optional and using `options` will override `transform` and `allowedValues`.\n  //   It can be either an object or an array (or a function, that returns it).\n  options={[{label: 'Hi', value: value1}, {label: 'Hello', value: value1} /* ... */]}\n/>;\n")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"Note:")," All ",Object(t.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted."),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"submitfield"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#submitfield"}),"#"),Object(t.b)("inlineCode",{parentName:"h2"},"SubmitField")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-js"}),"import SubmitField from 'uniforms-unstyled/SubmitField'; // Choose your theme package.\n\n<SubmitField\n  // Input wrapper class name.\n  //   In bootstrap themes, passed className is used on field block. This is\n  //   used on direct field wrapper.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  inputClassName=\"a b c\"\n  // Input ref.\n  //   Setting ref prop to a field won't work as desired, because you'll\n  //   receive a field component rather than a HTML input. If you need an input ref,\n  //   use this prop instead.\n  inputRef={ref => {}}\n/>;\n")),Object(t.b)("h2",null,Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"textfield"})),Object(t.b)("a",l({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#textfield"}),"#"),Object(t.b)("inlineCode",{parentName:"h2"},"TextField")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-js"}),"import TextField from 'uniforms-unstyled/TextField'; // Choose your theme package.\n\n<TextField\n  // Field layout.\n  //   Bootstrap grid layout style. Number is an equivalent of {sm: n}. Object\n  //   is a {mode: size} object. Complete string is simply passed through.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  grid={3} // 'col-3-sm' on label, 'col-9-sm' on input\n  grid=\"4\" // 'col-4-sm' on label, 'col-8-sm' on input\n  grid={{md: 5}} // 'col-5-md' on label, 'col-7-md' on input\n  grid=\"col-6-xl\" // 'col-6-xl' on label, 'col-6-xl' on input\n  // Field layout\n  //  The layout of label. You can set span and/or offset.\n  // Available in:\n  //   antd\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  // Field layout\n  //   The layout for input controls. Same as labelCol\n  // Available in:\n  //   antd\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  // Help text.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  help=\"Need help?\"\n  // Help block className.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  helpClassName=\"a b c\"\n  // Input icon.\n  //   Semantic inputs can have an icon. By default, it's placed on the right\n  //   side - to place it on the left, use iconLeft prop instead.\n  // Available in:\n  //   semantic\n  icon=\"user\"\n  // Input left icon.\n  //   Semantic inputs can have an icon. With this prop, it's placed on the\n  //   left side - to place it on the right, use icon prop instead.\n  // Available in:\n  //   semantic\n  iconLeft=\"user\"\n  // Input icon props.\n  //   Semantic inputs can have an icon. These props are passed directly to\n  //   the icon element.\n  // Available in:\n  //   semantic\n  iconProps={{onClick() {}}}\n  // Input wrapper class name.\n  //   In bootstrap themes, passed className is used on field block. This is\n  //   used on direct field wrapper.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  inputClassName=\"a b c\"\n  // Input ref.\n  //   Setting ref prop to a field won't work as desired, because you'll\n  //   receive a field component rather than a HTML input. If you need an input ref,\n  //   use this prop instead.\n  inputRef={ref => {}}\n  // Field inline error.\n  //   *Some description would be great, huh?*\n  // Available in:\n  //   antd\n  //   bootstrap3\n  //   bootstrap4\n  //   material\n  //   semantic\n  showInlineError={true}\n  // Input type.\n  //   HTML compatible input type like password. Default is text.\n  type=\"password\"\n  // Field and sourroundings wrap className.\n  //   In SemanticUI theme, this class name is used on ui input wrapper,\n  //   so you can pass variations like small, huge, inverted, transparent etc.\n  // Available in:\n  //   bootstrap3\n  //   bootstrap4\n  //   semantic\n  wrapClassName=\"a b c\"\n/>;\n")),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"Note:")," All ",Object(t.b)("inlineCode",{parentName:"p"},"BaseField")," props are also accepted."))}p.isMDXComponent=!0}}]);