(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{69:function(e,a,n){"use strict";n.r(a),n.d(a,"frontMatter",function(){return l}),n.d(a,"rightToc",function(){return i}),n.d(a,"default",function(){return c});n(0);var t=n(105);function r(){return(r=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}function o(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l={id:"uncategorized-forms",title:"Forms"},i=[{value:"Asynchronous validation",id:"asynchronous-validation",children:[]},{value:"Autosave",id:"autosave",children:[]},{value:"Hierarchy",id:"hierarchy",children:[]},{value:"Methods",id:"methods",children:[]},{value:"Change reactions",id:"change-reactions",children:[]},{value:"Model transformations",id:"model-transformations",children:[]},{value:"Post-submit handling",id:"post-submit-handling",children:[]},{value:"Validation options and modes",id:"validation-options-and-modes",children:[]}],s={rightToc:i},b="wrapper";function c(e){var a=e.components,n=o(e,["components"]);return Object(t.b)(b,r({},s,n,{components:a,mdxType:"MDXLayout"}),Object(t.b)("h2",null,Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"asynchronous-validation"})),Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#asynchronous-validation"}),"#"),"Asynchronous validation"),Object(t.b)("p",null,Object(t.b)("inlineCode",{parentName:"p"},"ValidatedForm")," (and so ",Object(t.b)("inlineCode",{parentName:"p"},"AutoForm"),") has an ",Object(t.b)("inlineCode",{parentName:"p"},"onValidate")," prop. It can be used to create an asynchronous validation:"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"const onValidate = (model, error, callback) => {\n  // You can either ignore validation error...\n  if (omitValidation(model)) {\n    return callback(null);\n  }\n\n  // ...or any additional validation if an error is already there...\n  if (error) {\n    return callback();\n  }\n\n  // ...or feed it with another error.\n  MyAPI.validate(model, error => callback(error || null));\n};\n\n// Later...\n\n<ValidatedForm {...props} onValidate={onValidate} />;\n")),Object(t.b)("h2",null,Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"autosave"})),Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#autosave"}),"#"),"Autosave"),Object(t.b)("p",null,"Every form has an autosave functionality. If you set an ",Object(t.b)("inlineCode",{parentName:"p"},"autosave")," prop, then every change will trigger a submit. There's also an ",Object(t.b)("inlineCode",{parentName:"p"},"autosaveDelay")," prop - a minimum time between saves in milliseconds (default: ",Object(t.b)("inlineCode",{parentName:"p"},"0"),")."),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"Example:")),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"<AutoForm\n  autosave\n  autosaveDelay={5000} // 5 seconds\n  schema={schema}\n  onSubmit={onSubmit}\n/>\n")),Object(t.b)("h2",null,Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"hierarchy"})),Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#hierarchy"}),"#"),"Hierarchy"),Object(t.b)("p",{align:"center"},Object(t.b)("img",{src:"img/uniforms-graph.png"})),Object(t.b)("h2",null,Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"methods"})),Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#methods"}),"#"),"Methods"),Object(t.b)("p",null,"You can use ",Object(t.b)("a",r({parentName:"p"},{href:"https://facebook.github.io/react/docs/more-about-refs.html"}),"React ",Object(t.b)("inlineCode",{parentName:"a"},"ref")," prop")," to manually access form methods. Example usage:"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"const MyForm = ({schema, onSubmit}) => {\n  let formRef;\n\n  return (\n    <section>\n      <AutoForm ref={ref => (formRef = ref)} schema={schema} onSubmit={onSubmit} />\n      <small onClick={() => formRef.reset()}>Reset</small>\n      <small onClick={() => formRef.submit()}>Submit</small>\n    </section>\n  );\n};\n")),Object(t.b)("p",null,"All available methods:"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"change(key, value)")),Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"reset()")),Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"submit()")),Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"validate()")," ",Object(t.b)("em",{parentName:"li"},"(added in ",Object(t.b)("inlineCode",{parentName:"em"},"ValidatedForm"),")"))),Object(t.b)("h2",null,Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"change-reactions"})),Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#change-reactions"}),"#"),"Change reactions"),Object(t.b)("p",null,"If you want to make one field to influence others, simply extend ",Object(t.b)("inlineCode",{parentName:"p"},"AutoForm")," and override ",Object(t.b)("inlineCode",{parentName:"p"},"onChange")," method."),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"Example:")),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"class ChainForm extends AutoForm {\n  onChange(key, value) {\n    if (key === 'key_to_intercept') return;\n    if (key === 'key_to_translate') return super.onChange('another_key', value);\n    if (key === 'key_to_mutate') {\n      super.onChange('another_key1', value * 2);\n      super.onChange('another_key2', value / 2);\n      return;\n    }\n\n    super.onChange(key, value);\n  }\n}\n")),Object(t.b)("p",null,"It can be easily applied multiple times to make your forms even more reusable."),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"Example:")),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"const withMultipliedField = (fieldA, fieldB, Form) =>\n  class withMultipliedFieldForm extends Form {\n    onChange(key, value) {\n      // Multiply fieldA\n      if (key === fieldA) super.onChange(fieldB, value + value);\n\n      // Pass every change\n      super.onChange(key, value);\n    }\n  };\n")),Object(t.b)("h2",null,Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"model-transformations"})),Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#model-transformations"}),"#"),"Model transformations"),Object(t.b)("p",null,"If you need to transform model before it will be validated, submitted or passed down to the fields, there's a ",Object(t.b)("inlineCode",{parentName:"p"},"modelTransform")," prop, which should be used in those use cases."),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"Example:")),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"<AutoForm\n  // Do not mutate given model!\n  modelTransform={(mode, model) => {\n    // This model will be passed to the fields.\n    if (mode === 'form') {\n      /* ... */\n    }\n\n    // This model will be submitted.\n    if (mode === 'submit') {\n      /* ... */\n    }\n\n    // This model will be validated.\n    if (mode === 'validate') {\n      /* ... */\n    }\n\n    // Otherwise, return unaltered model.\n    return model;\n  }}\n  onSubmit={onSubmit}\n  schema={schema}\n/>\n")),Object(t.b)("h2",null,Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"post-submit-handling"})),Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#post-submit-handling"}),"#"),"Post-submit handling"),Object(t.b)("p",null,"It's a good UX practice to tell your users that something failed or succeed. To make it simpler, there are ",Object(t.b)("inlineCode",{parentName:"p"},"onSubmitFailure")," and ",Object(t.b)("inlineCode",{parentName:"p"},"onSubmitSuccess")," props."),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"Example:")),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),"<AutoForm\n  schema={schema}\n  onSubmit={doc => db.saveThatReturnsPromise(doc)}\n  onSubmitSuccess={() => alert('Promise resolved!')}\n  onSubmitFailure={() => alert('Promise rejected!')}\n/>\n")),Object(t.b)("h2",null,Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"validation-options-and-modes"})),Object(t.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#validation-options-and-modes"}),"#"),"Validation options and modes"),Object(t.b)("p",null,"Any form can be validated in one those three styles:"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("p",{parentName:"li"},Object(t.b)("inlineCode",{parentName:"p"},"onChange"),"\nValidate on every change.")),Object(t.b)("li",{parentName:"ul"},Object(t.b)("p",{parentName:"li"},Object(t.b)("inlineCode",{parentName:"p"},"onChangeAfterSubmit")," ",Object(t.b)("em",{parentName:"p"},"(default)"),"\nValidate on every change, but only after first submit.")),Object(t.b)("li",{parentName:"ul"},Object(t.b)("p",{parentName:"li"},Object(t.b)("inlineCode",{parentName:"p"},"onSubmit"),"\nValidate on every submit."))),Object(t.b)("p",null,"If your schema validator accepts any options, those can be passed in ",Object(t.b)("inlineCode",{parentName:"p"},"validator")," prop."),Object(t.b)("p",null,Object(t.b)("strong",{parentName:"p"},"Example:")),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-js"}),'<AutoForm validate="onChange" validator={validatorOptions} schema={schema} onSubmit={onSubmit} />\n')))}c.isMDXComponent=!0}}]);